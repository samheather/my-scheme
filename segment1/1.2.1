#lang racket
(define noun-list 
  (list 'dog 'cat 'student 'professor 'book 'computer))
(define verb-list 
  (list 'ran 'ate 'slept 'drank 'exploded 'decomposed))
(define adjective-list 
  (list 'red 'slow 'dead 'pungent 'over-paid 'drunk))
(define adverb-list 
  (list 'quickly 'slowly 'wickedly 'majestically))

(define (pick-random lst)
  (list (list-ref lst (random (length lst))))
  )

(define (a-noun)
  (pick-random noun-list))

(define (a-verb)
  (pick-random verb-list))

(define (an-adverb)
  (pick-random adverb-list))

(define (an-adjective)
  (pick-random adjective-list))

;(define (either a b)
;  (if (= (random 2) 0) (a) (b) )
;  )

(define (either a b)
  (if (= (random 2) 0) a b)
  )


(define (noun-phrase)
  (append (an-adjective) (a-noun)) )

(define verb-phrase
  (append (a-verb) (an-adverb)) )

(define (sentence)
  ;cons takes one element and puts it at the front of a list
  ;append joins two lists together.
  (append (cons 'The (either verb-phrase a-verb)) (either verb-phrase a-verb))
  )

(sentence)